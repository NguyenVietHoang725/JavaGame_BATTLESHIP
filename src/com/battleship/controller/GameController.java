package com.battleship.controller;

import com.battleship.interfaces.IController;
import com.battleship.model.GameLogic;
import com.battleship.model.Move;
import com.battleship.utils.InputHandler;
import com.battleship.view.GameView;

public class GameController implements IController {

    private GameLogic game;
    private GameView view;
    private InputHandler input;
    private boolean isPaused;

    @Override
    public void init() {
        this.game = new GameLogic();
        this.view = new GameView();
        this.input = new InputHandler(game, view);
        this.isPaused = false;

        view.showMessage("üéÆ Game Battleship ƒë√£ kh·ªüi t·∫°o!");
    }

    @Override
    public void start() {
        view.showMessage("üöÄ B·∫ÆT ƒê·∫¶U GAME BATTLESHIP");
        
        placeAllShips();

        while (!game.isGameOver()) {
            if (isPaused) continue;

            view.printBoard(game.getBoard(), false);
            view.showSelectAction(); // Hi·ªÉn th·ªã menu l·ª±a ch·ªçn

            int choice = input.getAction();

            switch (choice) {
                case 1 -> {
                    view.showMessage("üî´ Nh·∫≠p t·ªça ƒë·ªô b·∫Øn (x y):");
                    Move move = input.getMove();
                    String result = game.attack(move.getRow(), move.getCol());
                    move.setNewValue(game.getNode(move.getRow(), move.getCol()).getStatus());
                    
                    if (result.contains("Sunk")) {
                    	view.showMessage("üí• M·ªôt t√†u ƒë√£ b·ªã ƒë√°nh ch√¨m!");
                    }
                    view.showMessage("üéØ K·∫øt qu·∫£: " + result.replace(" & Sunk", ""));
                }
                case 2 -> {
                    if (game.undo()) {
                        view.showMessage("‚Ü©Ô∏è ƒê√£ ho√†n t√°c b∆∞·ªõc ƒëi.");
                    } else {
                        view.showMessage("‚ùå Kh√¥ng th·ªÉ ho√†n t√°c.");
                    }
                }
                case 3 -> {
                    if (game.redo()) {
                        view.showMessage("‚Ü™Ô∏è ƒê√£ l√†m l·∫°i b∆∞·ªõc ƒëi.");
                    } else {
                        view.showMessage("‚ùå Kh√¥ng th·ªÉ l√†m l·∫°i.");
                    }
                }
                case 4 -> {
                    pause();
                }
                case 5 -> {
                    view.showMessage("‚ùå Tho√°t game...");
                    return;
                }
                default -> {
                    view.showMessage("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                }
            }
        }

        end();
    }

    @Override
    public void pause() {
        isPaused = true;
        view.showMessage("‚è∏ Game ƒë√£ t·∫°m d·ª´ng. Nh·∫•n b·∫•t k·ª≥ ph√≠m n√†o ƒë·ªÉ ti·∫øp t·ª•c...");
        input.waitForEnter();
        isPaused = false;
    }

    @Override
    public void end() {
        view.printBoard(game.getBoard(), true);
        view.showMessage("üèÅ Game k·∫øt th√∫c! B·∫°n ƒë√£ ti√™u di·ªát to√†n b·ªô t√†u.");
    }
    
    private void placeAllShips() {
        view.showMessage("‚öì H√£y ƒë·∫∑t 5 t√†u theo th·ª© t·ª± k√≠ch th∆∞·ªõc: [2, 3, 3, 4, 5]");

        for (int size : game.getShipSizes()) {
            boolean placed = false;

            while (!placed) {
                view.showMessage("üö¢ ƒê·∫∑t t√†u k√≠ch th∆∞·ªõc " + size + ": Nh·∫≠p x y chi·ªÅu(0-ngang, 1-d·ªçc):");
                int[] info = input.getPlaceShipWithSize(size); // Gi·∫£ s·ª≠ ƒë√£ s·ª≠a InputHandler

                placed = game.placeShip(info[0], info[1], size, info[2] == 0);

                if (!placed) {
                    view.showMessage("‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t t√†u t·∫°i v·ªã tr√≠ n√†y. H√£y th·ª≠ l·∫°i.");
                } else {
                    view.showMessage("‚úÖ ƒê·∫∑t th√†nh c√¥ng t√†u k√≠ch th∆∞·ªõc " + size);
                    view.printBoard(game.getBoard(), true); // Hi·ªÉn th·ªã b·∫£ng v·ªõi t√†u
                }
            }
        }
    }

}
